<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Keno Bet Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverIP}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverIP" elementType="Argument">
            <stringProp name="Argument.name">serverIP</stringProp>
            <stringProp name="Argument.value">10.26.128.55</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">UAT:10.26.128.55             DEV: 10.39.71.150                      LOCAL:localhost</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.desc">UAT: 8080                                                                     LOCAL:8181</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pathStdBet" elementType="Argument">
            <stringProp name="Argument.name">pathStdBet</stringProp>
            <stringProp name="Argument.value">KenoRest/services/keno/std-bet</stringProp>
            <stringProp name="Argument.desc">UAT: KenoRest/services/keno/std-bet                    LOCAL:services/keno/std-bet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pathHeadsTails" elementType="Argument">
            <stringProp name="Argument.name">pathHeadsTails</stringProp>
            <stringProp name="Argument.value">KenoRest/services/keno/heads-tails</stringProp>
            <stringProp name="Argument.desc">UAT: KenoRest/services/keno/heads-tails            LOCAL:services/keno/heads-tails</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="classicPercent" elementType="Argument">
            <stringProp name="Argument.name">classicPercent</stringProp>
            <stringProp name="Argument.value">34</stringProp>
            <stringProp name="Argument.desc">Percentage of Classic Keno Bets</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bonusMultiplierPercent" elementType="Argument">
            <stringProp name="Argument.name">bonusMultiplierPercent</stringProp>
            <stringProp name="Argument.value">33</stringProp>
            <stringProp name="Argument.desc">Percentage of Classic Keno Bets w/ Bonus or Mutliplier</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="headsTailsPercent" elementType="Argument">
            <stringProp name="Argument.name">headsTailsPercent</stringProp>
            <stringProp name="Argument.value">33</stringProp>
            <stringProp name="Argument.desc">Percentage of Heads or Tails Bet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="classicBetSpread" elementType="Argument">
            <stringProp name="Argument.name">classicBetSpread</stringProp>
            <stringProp name="Argument.value">11-12-10-10-10-10-10-10-10-10-10-10-10</stringProp>
            <stringProp name="Argument.desc">Spread of Classic - Spot 1, 2, ..., 10, 15, 20 &amp; 40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bonusMutliplierBetSpread" elementType="Argument">
            <stringProp name="Argument.name">bonusMutliplierBetSpread</stringProp>
            <stringProp name="Argument.value">11-12-10-10-10-10-10-10-10-10-10-10-10</stringProp>
            <stringProp name="Argument.desc">Spread of Bonus - Spot 1, 2, ..., 10, 15, 20 &amp; 40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="headsTailsBetSpread" elementType="Argument">
            <stringProp name="Argument.name">headsTailsBetSpread</stringProp>
            <stringProp name="Argument.value">34-33-33</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Spread of Heads, Tails or Evens</stringProp>
          </elementProp>
          <elementProp name="maxNumberOfGames" elementType="Argument">
            <stringProp name="Argument.name">maxNumberOfGames</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">should match value configured at Keno Host</stringProp>
          </elementProp>
          <elementProp name="maxCostPerChance" elementType="Argument">
            <stringProp name="Argument.name">maxCostPerChance</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">should match value configured at Keno Host</stringProp>
          </elementProp>
          <elementProp name="deviceIDSpread" elementType="Argument">
            <stringProp name="Argument.name">deviceIDSpread</stringProp>
            <stringProp name="Argument.value">25-25-25-25</stringProp>
            <stringProp name="Argument.desc">Percentage of users using particular device - web, iphone, ipad &amp; android</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numberOfBets" elementType="Argument">
            <stringProp name="Argument.name">numberOfBets</stringProp>
            <stringProp name="Argument.value">${__P(betFileSize,100000)}</stringProp>
            <stringProp name="Argument.desc">Number of bets to create in file to use for test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Real" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="classicPercent" elementType="Argument">
            <stringProp name="Argument.name">classicPercent</stringProp>
            <stringProp name="Argument.value">96.6</stringProp>
            <stringProp name="Argument.desc">Percentage of Classic Keno Bets</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bonusMultiplierPercent" elementType="Argument">
            <stringProp name="Argument.name">bonusMultiplierPercent</stringProp>
            <stringProp name="Argument.value">1.18</stringProp>
            <stringProp name="Argument.desc">Percentage of Classic Keno Bets w/ Bonus or Mutliplier</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="headsTailsPercent" elementType="Argument">
            <stringProp name="Argument.name">headsTailsPercent</stringProp>
            <stringProp name="Argument.value">2.22</stringProp>
            <stringProp name="Argument.desc">Percentage of Heads or Tails Bet</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="classicBetSpread" elementType="Argument">
            <stringProp name="Argument.name">classicBetSpread</stringProp>
            <stringProp name="Argument.value">0.84-1.39-9.37-18.74-18.25-22.89-5.73-2.91-2.93-13.17-2.11-0.62-1.04</stringProp>
            <stringProp name="Argument.desc">Spread of Classic - Spot 1, 2, ..., 10, 15, 20 &amp; 40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bonusMutliplierBetSpread" elementType="Argument">
            <stringProp name="Argument.name">bonusMutliplierBetSpread</stringProp>
            <stringProp name="Argument.value">23.19-2.19-7.02-9.78-4.33-2.46-1.74-1.19-0.95-5-23.29-8.31-10.55</stringProp>
            <stringProp name="Argument.desc">Spread of Bonus - Spot 1, 2, ..., 10, 15, 20 &amp; 40</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="headsTailsBetSpread" elementType="Argument">
            <stringProp name="Argument.name">headsTailsBetSpread</stringProp>
            <stringProp name="Argument.value">32.81-38.79-28.4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Spread of Heads, Tails or Evens</stringProp>
          </elementProp>
          <elementProp name="maxNumberOfGames" elementType="Argument">
            <stringProp name="Argument.name">maxNumberOfGames</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">should match value configured at Keno Host</stringProp>
          </elementProp>
          <elementProp name="maxCostPerChance" elementType="Argument">
            <stringProp name="Argument.name">maxCostPerChance</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">should match value configured at Keno Host</stringProp>
          </elementProp>
          <elementProp name="deviceIDSpread" elementType="Argument">
            <stringProp name="Argument.name">deviceIDSpread</stringProp>
            <stringProp name="Argument.value">42-34-11-14</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Percentage of users using particular device - web, iphone, ipad &amp; android</stringProp>
          </elementProp>
          <elementProp name="numberOfBets" elementType="Argument">
            <stringProp name="Argument.name">numberOfBets</stringProp>
            <stringProp name="Argument.value">${__P(betFileSize,30000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of bets to create in file to use for test</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Account Data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">accounts.txt</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Bet Data" enabled="true">
        <stringProp name="delimiter">\</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">bets.txt</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">URL,device,costPerChance,numberOfGames,selections,bonusSelected</stringProp>
      </CSVDataSet>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThroughputVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transaction Throughput vs Threads" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">C:\jmeter\bin\log.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">C:\jmeter\bin\log.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1430198039000</longProp>
        <longProp name="ThreadGroup.end_time">1430198039000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import org.apache.jmeter.config.CSVDataSet;
import org.apache.jmeter.services.FileServer;

Random randGen = new Random();
String deviceID;
String betStr;

// Setup bet file - output
FileOutputStream f = new FileOutputStream(FileServer.getFileServer().getBaseDir() + &quot;\\bets.txt&quot;, false);
p = new PrintStream(f);

// Create list of available keno numbers 1 - 80
ArrayList kenoNumbers = new ArrayList();
for (int i = 1; i &lt; 80; i++) {
	kenoNumbers.add(i);
}

// Percentage breakdown of bet type - Classic / Bonus/Multiplier or Heads/Tails
//double classicPercent = 34.0;
//double bonusPercent = 33.0;
//double headsTailsPercent = 33.0;
double classicPercent = Double.parseDouble(vars.get(&quot;classicPercent&quot;));
double bonusPercent = Double.parseDouble(vars.get(&quot;bonusMultiplierPercent&quot;));
double headsTailsPercent = Double.parseDouble(vars.get(&quot;headsTailsPercent&quot;));

//String classicBetSpread = &quot;1-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String bonusBetSpread = &quot;10-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String headsBetSpread = &quot;34-33-33&quot;;

// Multiple total percentage by 100 - will be used later to handle random precision to 2 decimal places
int totalPercent = (classicPercent + bonusPercent + headsTailsPercent) * 100;

// Percentage breakdown of Classic - Spot 1, 2, ... 9, 10, 15, 20, 40 
// classicSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineClassicBetSpread() {

	//String[] clcSpread = classicBetSpread.split(&quot;-&quot;);
	String[] clcSpread = (vars.get(&quot;classicBetSpread&quot;)).split(&quot;-&quot;);
	double[] classicSpread = new double[clcSpread.length];
	double classicSpreadTotal = 0;

	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; clcSpread.length; i++) {
		classicSpread[i] = Double.parseDouble(clcSpread[i]);
		classicSpreadTotal += classicSpread[i];
	}
	createBet(clcSpread, classicSpread, classicSpreadTotal, 1);
	return;
}

// Percentage breakdown of Bonus/Multiplier - Spot 1, 2, ... 9, 10, 15, 20, 40 
// bonusSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineBonusBetSpread() {
	//String[] bnsSpread = bonusBetSpread.split(&quot;-&quot;);
	String[] bnsSpread = (vars.get(&quot;bonusMutliplierBetSpread&quot;)).split(&quot;-&quot;);
	double[] bonusSpread = new double[bnsSpread.length];
	double bonusSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; bnsSpread.length; i++)
	{
		bonusSpread[i] = Double.parseDouble(bnsSpread[i]);
		bonusSpreadTotal += bonusSpread[i];
	}
	createBet(bnsSpread, bonusSpread, bonusSpreadTotal, 2);
}

// Percentage breakdown of Heads or Tails - Evens, Heads, Tails
// bonusSpread == &quot;34-33-33&quot;
//                 &lt;-- number of heads or tails bets
determineHeadsTailsBetSpread() {
	//String[] hdsSpread = headsBetSpread.split(&quot;-&quot;);
	String[] hdsSpread = (vars.get(&quot;headsTailsBetSpread&quot;)).split(&quot;-&quot;);
	double[] headsSpread = new double[hdsSpread.length];
	double headsSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; hdsSpread.length; i++)
	{
		headsSpread[i] = Double.parseDouble(hdsSpread[i]);
		headsSpreadTotal += headsSpread[i];
	}
	createBet(hdsSpread, headsSpread, headsSpreadTotal, 3);
}


// Create betString to be passed back to HTTP request
// Need to determine - if classic or bonus, how many selections and bonus set to true/false
//                     if headsTails, heads, tails or evens
//                     number of games, cost per chance 
createBet(String[] strSpread, double[] intSpread, double intSpreadTotal, int betType) {
	// Create bet - determine spot 1, 2, etc or heads, tails, evens
	int spot;
	int maxRand = (int) (intSpreadTotal*100);
	int selectionComplete = 0;
	int costPerChanceInt;
	double cumulativeSpread = 0.0;
	double rand = randGen.nextInt(maxRand);
	rand = rand / 100;
	String selection;
	String bonusSelected;
	String numberOfGames;
	String costPerChance;
	ArrayList numberSelection = new ArrayList();

	for (int i = 0; i &lt; strSpread.length; i++)
	{
		cumulativeSpread = cumulativeSpread + intSpread[i];
		if ((rand &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			spot = i + 1;
			if (betType != 3) {
				if (spot == 11) {
					spot = 15;
				} else if (spot == 12) {
					spot = 20;
				} else if (spot == 13) {
					spot = 40; 
				}
				// Create list of selections numbers
				Collections.shuffle(kenoNumbers);
				for (int i = 0; i &lt; spot; i++) {
					numberSelection.add(kenoNumbers.get(i));
				}
				// If Bonus selected
				if (betType == 2) {
					bonusSelected = &quot;true&quot;;
				} else {
					bonusSelected = &quot;false&quot;;
				}	
			} else {
				if (spot == 1) {
					selection = &quot;evens&quot;;
				} else if (spot == 2) {
					selection = &quot;heads&quot;;
				} else if (spot == 3) {
					selection = &quot;tails&quot;;
				}		
			}
			selectionComplete = 1;
		}
	}
	// Determine number of games
	numberOfGames = (randGen.nextInt(Integer.parseInt(vars.get(&quot;maxNumberOfGames&quot;)))+1).toString();

	// Create bet string and return
	if (betType != 3) {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		if (costPerChanceInt &lt; 100) {
			costPerChanceInt = costPerChanceInt + 100;
		}
		costPerChance = costPerChanceInt.toString();	
		betStr = costPerChance.toString() + &quot;\\&quot; + numberOfGames.toString() + &quot;\\&quot; + numberSelection.toString() + &quot;\\&quot; + bonusSelected;
		//betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	} else {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	
		betStr = costPerChance.toString() + &quot;\\&quot; + numberOfGames.toString() + &quot;\\&quot; + selection.toString() + &quot;\\&quot;;
 
		//betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;		
	}
	//vars.put(&quot;betString&quot;, betStr);
	return;
}

//String deviceSpread = &quot;25-25-25-25&quot;;


determineDevice() {

	//String[] dvcSpread = deviceSpread.split(&quot;-&quot;);
	String[] dvcSpread = (vars.get(&quot;deviceIDSpread&quot;)).split(&quot;-&quot;);
	int[] deviceSpread = new int[dvcSpread.length];
	int deviceSpreadTotal = 0;
	int device = 0;
	int selectionComplete = 0;
	int cumulativeSpread = 0;
	
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; dvcSpread.length; i++) {
		deviceSpread[i] = Integer.parseInt(dvcSpread[i]);
		deviceSpreadTotal += deviceSpread[i];
	}
	int rands = randGen.nextInt(deviceSpreadTotal);

	for (int i = 0; i &lt; dvcSpread.length; i++) {
		cumulativeSpread = cumulativeSpread + deviceSpread[i];
		if ((rands &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			device = i + 1;
			selectionComplete = 1;
		}
	}

	if (device == 1) {
		// Keno web
		deviceID = &quot;20000050&quot;;
	} else if (device == 2) {
		// Keno iPhone
		deviceID = &quot;20000051&quot;;		
	} else if (device == 3) {
		// Keno iPad
		deviceID = &quot;20000052&quot;;
	} else {
		// Keno android
		deviceID = &quot;20000053&quot;;
	}
	//vars.put(&quot;device&quot;, deviceID);
	return;
}

// Controller to write bets to file
int numOfBets = Integer.parseInt(vars.get(&quot;numberOfBets&quot;));
String URL;

for (int i = 0; i &lt; numOfBets; i++) {

	// Determine type of bet to be placed - either Classic, Classic w/ bonus/multiplier or Heads/Tails
	// Divide total random number by 100 - to provide a random number to 2 decimal places
	double randPercent = randGen.nextInt(totalPercent);
	randPercent = randPercent/100;
	
	// Determine bet type
	if (randPercent &lt; classicPercent) {
		// Classic bet
		//vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
		URL = &quot;pathStdBet&quot;;
		//vars.put(&quot;temp&quot;, &quot;classic&quot;);
		determineClassicBetSpread();
	} else if (randPercent &lt; (classicPercent + bonusPercent)) {
		// Classic bet with Bonus/multiplier
		//vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
		URL = &quot;pathStdBet&quot;;
		//vars.put(&quot;temp&quot;, &quot;bonus&quot;);
		determineBonusBetSpread();
	} else {
		// Heads or Tails bet
		//vars.put(&quot;temp&quot;, &quot;heads&quot;);
		URL = &quot;pathHeadsTails&quot;;
		determineHeadsTailsBetSpread();
	}
	determineDevice();

	p.println(URL + &quot;\\&quot; + deviceID + &quot;\\&quot; + betStr);
}

p.close();
f.close();</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performance Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,10)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,300)}</stringProp>
        <longProp name="ThreadGroup.start_time">1430103782000</longProp>
        <longProp name="ThreadGroup.end_time">1428213370000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,1800)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Transactions per Minute Controller" enabled="true">
          <intProp name="calcMode">1</intProp>
          <stringProp name="throughput">${__P(TPM,600)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PlaceBet" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">50</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If StandardBet" enabled="true">
            <stringProp name="IfController.condition">&quot;${URL}&quot; == &quot;pathStdBet&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StandardBet" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000051&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: 845077,&#xd;
    &quot;password&quot;: &quot;117af2f4d5818b1db1a210a6302a1a72&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: 2720,&#xd;
    &quot;numberOfGames&quot;: 26,&#xd;
    &quot;selections&quot;: [[71, 54]],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import org.apache.jmeter.config.CSVDataSet;

Random randGen = new Random();

// Create list of available keno numbers 1 - 80
ArrayList kenoNumbers = new ArrayList();
for (int i = 1; i &lt; 80; i++) {
	kenoNumbers.add(i);
}

// Percentage breakdown of bet type - Classic / Bonus/Multiplier or Heads/Tails
//double classicPercent = 34.0;
//double bonusPercent = 33.0;
//double headsTailsPercent = 33.0;
double classicPercent = Double.parseDouble(vars.get(&quot;classicPercent&quot;));
double bonusPercent = Double.parseDouble(vars.get(&quot;bonusMultiplierPercent&quot;));
double headsTailsPercent = Double.parseDouble(vars.get(&quot;headsTailsPercent&quot;));

//String classicBetSpread = &quot;1-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String bonusBetSpread = &quot;10-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String headsBetSpread = &quot;34-33-33&quot;;

// Multiple total percentage by 100 - will be used later to handle random precision to 2 decimal places
int totalPercent = (classicPercent + bonusPercent + headsTailsPercent) * 100;

// Percentage breakdown of Classic - Spot 1, 2, ... 9, 10, 15, 20, 40 
// classicSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineClassicBetSpread() {

	//String[] clcSpread = classicBetSpread.split(&quot;-&quot;);
	String[] clcSpread = (vars.get(&quot;classicBetSpread&quot;)).split(&quot;-&quot;);
	int[] classicSpread = new int[clcSpread.length];
	int classicSpreadTotal = 0;

	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; clcSpread.length; i++) {
		classicSpread[i] = Integer.parseInt(clcSpread[i]);
		classicSpreadTotal += classicSpread[i];
	}
	createBet(clcSpread, classicSpread, classicSpreadTotal, 1);
	return;
}

// Percentage breakdown of Bonus/Multiplier - Spot 1, 2, ... 9, 10, 15, 20, 40 
// bonusSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineBonusBetSpread() {
	//String[] bnsSpread = bonusBetSpread.split(&quot;-&quot;);
	String[] bnsSpread = (vars.get(&quot;bonusMutliplierBetSpread&quot;)).split(&quot;-&quot;);
	int[] bonusSpread = new int[bnsSpread.length];
	int bonusSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; bnsSpread.length; i++)
	{
		bonusSpread[i] = Integer.parseInt(bnsSpread[i]);
		bonusSpreadTotal += bonusSpread[i];
	}
	createBet(bnsSpread, bonusSpread, bonusSpreadTotal, 2);
}

// Percentage breakdown of Heads or Tails - Evens, Heads, Tails
// bonusSpread == &quot;34-33-33&quot;
//                 &lt;-- number of heads or tails bets
determineHeadsTailsBetSpread() {
	//String[] hdsSpread = headsBetSpread.split(&quot;-&quot;);
	String[] hdsSpread = (vars.get(&quot;headsTailsBetSpread&quot;)).split(&quot;-&quot;);
	int[] headsSpread = new int[hdsSpread.length];
	int headsSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; hdsSpread.length; i++)
	{
		headsSpread[i] = Integer.parseInt(hdsSpread[i]);
		headsSpreadTotal += headsSpread[i];
	}
	createBet(hdsSpread, headsSpread, headsSpreadTotal, 3);
}

// Create betString to be passed back to HTTP request
// Need to determine - if classic or bonus, how many selections and bonus set to true/false
//                     if headsTails, heads, tails or evens
//                     number of games, cost per chance 
createBet(String[] strSpread, int[] intSpread, int intSpreadTotal, int betType) {
	// Create bet - determine spot 1, 2, etc or heads, tails, evens
	int spot;
	int selectionComplete = 0;
	int costPerChanceInt;
	double cumulativeSpread = 0.0;
	double rand = randGen.nextInt(intSpreadTotal*100);
	rand = rand / 100;
	String selection;
	String bonusSelected;
	String numberOfGames;
	String costPerChance;
	ArrayList numberSelection = new ArrayList();

	for (int i = 0; i &lt; strSpread.length; i++)
	{
		cumulativeSpread = cumulativeSpread + intSpread[i];
		if ((rand &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			spot = i + 1;
			if (betType != 3) {
				if (spot == 11) {
					spot = 15;
				} else if (spot == 12) {
					spot = 20;
				} else if (spot == 13) {
					spot = 40; 
				}
				// Create list of selections numbers
				Collections.shuffle(kenoNumbers);
				for (int i = 0; i &lt; spot; i++) {
					numberSelection.add(kenoNumbers.get(i));
				}
				// If Bonus selected
				if (betType == 2) {
					bonusSelected = &quot;true&quot;;
				} else {
					bonusSelected = &quot;false&quot;;
				}	
			} else {
				if (spot == 1) {
					selection = &quot;evens&quot;;
				} else if (spot == 2) {
					selection = &quot;heads&quot;;
				} else if (spot == 3) {
					selection = &quot;tails&quot;;
				}		
			}
			selectionComplete = 1;
		}
	}
	// Determine number of games
 	numberOfGames = (randGen.nextInt(Integer.parseInt(vars.get(&quot;maxNumberOfGames&quot;)))+1).toString();

	// Create bet string and return
	String betStr;
	if (betType != 3) {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		costPerChance = costPerChanceInt.toString();	
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	} else {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	 
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;		
	}
	/*if (betType == &quot;HeadsOrTails&quot;) {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  vars.get(&quot;maxCostPerChance&quot;);
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	 
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;
	} else {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		costPerChance = costPerChanceInt.toString();	
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	}*/
	vars.put(&quot;betString&quot;, betStr);
	return;
}

//String deviceSpread = &quot;25-25-25-25&quot;;


determineDevice() {

	//String[] dvcSpread = deviceSpread.split(&quot;-&quot;);
	String[] dvcSpread = (vars.get(&quot;deviceIDSpread&quot;)).split(&quot;-&quot;);
	int[] deviceSpread = new int[dvcSpread.length];
	int deviceSpreadTotal = 0;
	int device = 0;
	String deviceID;
	int selectionComplete = 0;
	int cumulativeSpread = 0;
	
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; dvcSpread.length; i++) {
		deviceSpread[i] = Integer.parseInt(dvcSpread[i]);
		deviceSpreadTotal += deviceSpread[i];
	}
	int rands = randGen.nextInt(deviceSpreadTotal);

	for (int i = 0; i &lt; dvcSpread.length; i++) {
		cumulativeSpread = cumulativeSpread + deviceSpread[i];
		if ((rands &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			device = i + 1;
			selectionComplete = 1;
		}
	}

	if (device == 1) {
		// Keno web
		deviceID = &quot;20000050&quot;;
	} else if (device == 2) {
		// Keno iPhone
		deviceID = &quot;20000051&quot;;		
	} else if (device == 3) {
		// Keno iPad
		deviceID = &quot;20000052&quot;;
	} else {
		// Keno android
		deviceID = &quot;20000053&quot;;
	}
	vars.put(&quot;device&quot;, deviceID);
	return;
}

// Determine type of bet to be placed - either Classic, Classic w/ bonus/multiplier or Heads/Tails
// Divide total random number by 100 - to provide a random number to 2 decimal places
double randPercent = randGen.nextInt(totalPercent);
randPercent = randPercent/100;

// Determine bet type
if (randPercent &lt; classicPercent) {
	// Classic bet
	vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
	//vars.put(&quot;temp&quot;, &quot;classic&quot;);
	determineClassicBetSpread();
} else if (randPercent &lt; (classicPercent + bonusPercent)) {
	// Classic bet with Bonus/multiplier
	vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
	//vars.put(&quot;temp&quot;, &quot;bonus&quot;);
	determineBonusBetSpread();
} else {
	// Heads or Tails bet
	//vars.put(&quot;temp&quot;, &quot;heads&quot;);
	vars.put(&quot;URL&quot;, vars.get(&quot;pathHeadsTails&quot;));
	determineHeadsTailsBetSpread();
}
determineDevice();</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StandardBet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;${device}&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${selections}],&#xd;
    &quot;bonusSelected&quot;: ${bonusSelected}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import org.apache.jmeter.config.CSVDataSet;

Random randGen = new Random();

// Create list of available keno numbers 1 - 80
ArrayList kenoNumbers = new ArrayList();
for (int i = 1; i &lt; 80; i++) {
	kenoNumbers.add(i);
}

// Percentage breakdown of bet type - Classic / Bonus/Multiplier or Heads/Tails
//double classicPercent = 34.0;
//double bonusPercent = 33.0;
//double headsTailsPercent = 33.0;
double classicPercent = Double.parseDouble(vars.get(&quot;classicPercent&quot;));
double bonusPercent = Double.parseDouble(vars.get(&quot;bonusMultiplierPercent&quot;));
double headsTailsPercent = Double.parseDouble(vars.get(&quot;headsTailsPercent&quot;));

//String classicBetSpread = &quot;1-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String bonusBetSpread = &quot;10-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String headsBetSpread = &quot;34-33-33&quot;;

// Multiple total percentage by 100 - will be used later to handle random precision to 2 decimal places
int totalPercent = (classicPercent + bonusPercent + headsTailsPercent) * 100;

// Percentage breakdown of Classic - Spot 1, 2, ... 9, 10, 15, 20, 40 
// classicSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineClassicBetSpread() {

	//String[] clcSpread = classicBetSpread.split(&quot;-&quot;);
	String[] clcSpread = (vars.get(&quot;classicBetSpread&quot;)).split(&quot;-&quot;);
	int[] classicSpread = new int[clcSpread.length];
	int classicSpreadTotal = 0;

	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; clcSpread.length; i++) {
		classicSpread[i] = Integer.parseInt(clcSpread[i]);
		classicSpreadTotal += classicSpread[i];
	}
	createBet(clcSpread, classicSpread, classicSpreadTotal, 1);
	return;
}

// Percentage breakdown of Bonus/Multiplier - Spot 1, 2, ... 9, 10, 15, 20, 40 
// bonusSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineBonusBetSpread() {
	//String[] bnsSpread = bonusBetSpread.split(&quot;-&quot;);
	String[] bnsSpread = (vars.get(&quot;bonusMutliplierBetSpread&quot;)).split(&quot;-&quot;);
	int[] bonusSpread = new int[bnsSpread.length];
	int bonusSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; bnsSpread.length; i++)
	{
		bonusSpread[i] = Integer.parseInt(bnsSpread[i]);
		bonusSpreadTotal += bonusSpread[i];
	}
	createBet(bnsSpread, bonusSpread, bonusSpreadTotal, 2);
}

// Percentage breakdown of Heads or Tails - Evens, Heads, Tails
// bonusSpread == &quot;34-33-33&quot;
//                 &lt;-- number of heads or tails bets
determineHeadsTailsBetSpread() {
	//String[] hdsSpread = headsBetSpread.split(&quot;-&quot;);
	String[] hdsSpread = (vars.get(&quot;headsTailsBetSpread&quot;)).split(&quot;-&quot;);
	int[] headsSpread = new int[hdsSpread.length];
	int headsSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; hdsSpread.length; i++)
	{
		headsSpread[i] = Integer.parseInt(hdsSpread[i]);
		headsSpreadTotal += headsSpread[i];
	}
	createBet(hdsSpread, headsSpread, headsSpreadTotal, 3);
}

// Create betString to be passed back to HTTP request
// Need to determine - if classic or bonus, how many selections and bonus set to true/false
//                     if headsTails, heads, tails or evens
//                     number of games, cost per chance 
createBet(String[] strSpread, int[] intSpread, int intSpreadTotal, int betType) {
	// Create bet - determine spot 1, 2, etc or heads, tails, evens
	int spot;
	int selectionComplete = 0;
	int costPerChanceInt;
	double cumulativeSpread = 0.0;
	double rand = randGen.nextInt(intSpreadTotal*100);
	rand = rand / 100;
	String selection;
	String bonusSelected;
	String numberOfGames;
	String costPerChance;
	ArrayList numberSelection = new ArrayList();

	for (int i = 0; i &lt; strSpread.length; i++)
	{
		cumulativeSpread = cumulativeSpread + intSpread[i];
		if ((rand &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			spot = i + 1;
			if (betType != 3) {
				if (spot == 11) {
					spot = 15;
				} else if (spot == 12) {
					spot = 20;
				} else if (spot == 13) {
					spot = 40; 
				}
				// Create list of selections numbers
				Collections.shuffle(kenoNumbers);
				for (int i = 0; i &lt; spot; i++) {
					numberSelection.add(kenoNumbers.get(i));
				}
				// If Bonus selected
				if (betType == 2) {
					bonusSelected = &quot;true&quot;;
				} else {
					bonusSelected = &quot;false&quot;;
				}	
			} else {
				if (spot == 1) {
					selection = &quot;evens&quot;;
				} else if (spot == 2) {
					selection = &quot;heads&quot;;
				} else if (spot == 3) {
					selection = &quot;tails&quot;;
				}		
			}
			selectionComplete = 1;
		}
	}
	// Determine number of games
 	numberOfGames = (randGen.nextInt(Integer.parseInt(vars.get(&quot;maxNumberOfGames&quot;)))+1).toString();

	// Create bet string and return
	String betStr;
	if (betType != 3) {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		costPerChance = costPerChanceInt.toString();	
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	} else {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	 
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;		
	}
	/*if (betType == &quot;HeadsOrTails&quot;) {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  vars.get(&quot;maxCostPerChance&quot;);
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	 
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;
	} else {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		costPerChance = costPerChanceInt.toString();	
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	}*/
	vars.put(&quot;betString&quot;, betStr);
	return;
}

//String deviceSpread = &quot;25-25-25-25&quot;;


determineDevice() {

	//String[] dvcSpread = deviceSpread.split(&quot;-&quot;);
	String[] dvcSpread = (vars.get(&quot;deviceIDSpread&quot;)).split(&quot;-&quot;);
	int[] deviceSpread = new int[dvcSpread.length];
	int deviceSpreadTotal = 0;
	int device = 0;
	String deviceID;
	int selectionComplete = 0;
	int cumulativeSpread = 0;
	
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; dvcSpread.length; i++) {
		deviceSpread[i] = Integer.parseInt(dvcSpread[i]);
		deviceSpreadTotal += deviceSpread[i];
	}
	int rands = randGen.nextInt(deviceSpreadTotal);

	for (int i = 0; i &lt; dvcSpread.length; i++) {
		cumulativeSpread = cumulativeSpread + deviceSpread[i];
		if ((rands &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			device = i + 1;
			selectionComplete = 1;
		}
	}

	if (device == 1) {
		// Keno web
		deviceID = &quot;20000050&quot;;
	} else if (device == 2) {
		// Keno iPhone
		deviceID = &quot;20000051&quot;;		
	} else if (device == 3) {
		// Keno iPad
		deviceID = &quot;20000052&quot;;
	} else {
		// Keno android
		deviceID = &quot;20000053&quot;;
	}
	vars.put(&quot;device&quot;, deviceID);
	return;
}

// Determine type of bet to be placed - either Classic, Classic w/ bonus/multiplier or Heads/Tails
// Divide total random number by 100 - to provide a random number to 2 decimal places
double randPercent = randGen.nextInt(totalPercent);
randPercent = randPercent/100;

// Determine bet type
if (randPercent &lt; classicPercent) {
	// Classic bet
	vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
	//vars.put(&quot;temp&quot;, &quot;classic&quot;);
	determineClassicBetSpread();
} else if (randPercent &lt; (classicPercent + bonusPercent)) {
	// Classic bet with Bonus/multiplier
	vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
	//vars.put(&quot;temp&quot;, &quot;bonus&quot;);
	determineBonusBetSpread();
} else {
	// Heads or Tails bet
	//vars.put(&quot;temp&quot;, &quot;heads&quot;);
	vars.put(&quot;URL&quot;, vars.get(&quot;pathHeadsTails&quot;));
	determineHeadsTailsBetSpread();
}
determineDevice();</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Heads or Tails" enabled="true">
            <stringProp name="IfController.condition">&quot;${URL}&quot; == &quot;pathHeadsTails&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsOrTails" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;${device}&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;${selections}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;
import java.util.Collections;
import org.apache.jmeter.config.CSVDataSet;

Random randGen = new Random();

// Create list of available keno numbers 1 - 80
ArrayList kenoNumbers = new ArrayList();
for (int i = 1; i &lt; 80; i++) {
	kenoNumbers.add(i);
}

// Percentage breakdown of bet type - Classic / Bonus/Multiplier or Heads/Tails
//double classicPercent = 34.0;
//double bonusPercent = 33.0;
//double headsTailsPercent = 33.0;
double classicPercent = Double.parseDouble(vars.get(&quot;classicPercent&quot;));
double bonusPercent = Double.parseDouble(vars.get(&quot;bonusMultiplierPercent&quot;));
double headsTailsPercent = Double.parseDouble(vars.get(&quot;headsTailsPercent&quot;));

//String classicBetSpread = &quot;1-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String bonusBetSpread = &quot;10-10-10-10-10-10-10-10-10-10-10-10-10&quot;;
//String headsBetSpread = &quot;34-33-33&quot;;

// Multiple total percentage by 100 - will be used later to handle random precision to 2 decimal places
int totalPercent = (classicPercent + bonusPercent + headsTailsPercent) * 100;

// Percentage breakdown of Classic - Spot 1, 2, ... 9, 10, 15, 20, 40 
// classicSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineClassicBetSpread() {

	//String[] clcSpread = classicBetSpread.split(&quot;-&quot;);
	String[] clcSpread = (vars.get(&quot;classicBetSpread&quot;)).split(&quot;-&quot;);
	int[] classicSpread = new int[clcSpread.length];
	int classicSpreadTotal = 0;

	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; clcSpread.length; i++) {
		classicSpread[i] = Integer.parseInt(clcSpread[i]);
		classicSpreadTotal += classicSpread[i];
	}
	createBet(clcSpread, classicSpread, classicSpreadTotal, 1);
	return;
}

// Percentage breakdown of Bonus/Multiplier - Spot 1, 2, ... 9, 10, 15, 20, 40 
// bonusSpread == &quot;11-12-10-10-10-10-10-10-10-10-10-10-10&quot;
//                   0  1  2  3 &lt;-- number of classic bets
determineBonusBetSpread() {
	//String[] bnsSpread = bonusBetSpread.split(&quot;-&quot;);
	String[] bnsSpread = (vars.get(&quot;bonusMutliplierBetSpread&quot;)).split(&quot;-&quot;);
	int[] bonusSpread = new int[bnsSpread.length];
	int bonusSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; bnsSpread.length; i++)
	{
		bonusSpread[i] = Integer.parseInt(bnsSpread[i]);
		bonusSpreadTotal += bonusSpread[i];
	}
	createBet(bnsSpread, bonusSpread, bonusSpreadTotal, 2);
}

// Percentage breakdown of Heads or Tails - Evens, Heads, Tails
// bonusSpread == &quot;34-33-33&quot;
//                 &lt;-- number of heads or tails bets
determineHeadsTailsBetSpread() {
	//String[] hdsSpread = headsBetSpread.split(&quot;-&quot;);
	String[] hdsSpread = (vars.get(&quot;headsTailsBetSpread&quot;)).split(&quot;-&quot;);
	int[] headsSpread = new int[hdsSpread.length];
	int headsSpreadTotal = 0;
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; hdsSpread.length; i++)
	{
		headsSpread[i] = Integer.parseInt(hdsSpread[i]);
		headsSpreadTotal += headsSpread[i];
	}
	createBet(hdsSpread, headsSpread, headsSpreadTotal, 3);
}

// Create betString to be passed back to HTTP request
// Need to determine - if classic or bonus, how many selections and bonus set to true/false
//                     if headsTails, heads, tails or evens
//                     number of games, cost per chance 
createBet(String[] strSpread, int[] intSpread, int intSpreadTotal, int betType) {
	// Create bet - determine spot 1, 2, etc or heads, tails, evens
	int spot;
	int selectionComplete = 0;
	int costPerChanceInt;
	double cumulativeSpread = 0.0;
	double rand = randGen.nextInt(intSpreadTotal*100);
	rand = rand / 100;
	String selection;
	String bonusSelected;
	String numberOfGames;
	String costPerChance;
	ArrayList numberSelection = new ArrayList();

	for (int i = 0; i &lt; strSpread.length; i++)
	{
		cumulativeSpread = cumulativeSpread + intSpread[i];
		if ((rand &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			spot = i + 1;
			if (betType != 3) {
				if (spot == 11) {
					spot = 15;
				} else if (spot == 12) {
					spot = 20;
				} else if (spot == 13) {
					spot = 40; 
				}
				// Create list of selections numbers
				Collections.shuffle(kenoNumbers);
				for (int i = 0; i &lt; spot; i++) {
					numberSelection.add(kenoNumbers.get(i));
				}
				// If Bonus selected
				if (betType == 2) {
					bonusSelected = &quot;true&quot;;
				} else {
					bonusSelected = &quot;false&quot;;
				}	
			} else {
				if (spot == 1) {
					selection = &quot;evens&quot;;
				} else if (spot == 2) {
					selection = &quot;heads&quot;;
				} else if (spot == 3) {
					selection = &quot;tails&quot;;
				}		
			}
			selectionComplete = 1;
		}
	}
	// Determine number of games
 	numberOfGames = (randGen.nextInt(Integer.parseInt(vars.get(&quot;maxNumberOfGames&quot;)))+1).toString();

	// Create bet string and return
	String betStr;
	if (betType != 3) {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		costPerChance = costPerChanceInt.toString();	
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	} else {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	 
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;		
	}
	/*if (betType == &quot;HeadsOrTails&quot;) {
		// Determine cost per chance - must be in multiples of 10 cents.  $1  is represented by 100.
		costPerChanceInt =  vars.get(&quot;maxCostPerChance&quot;);
		costPerChanceInt = costPerChanceInt / 100;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 100;
		costPerChance = costPerChanceInt.toString();	 
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selection\&quot;: \&quot;&quot; + selection.toString() + &quot;\&quot;&quot;;
	} else {
		// Determine max cost per chance - must be in multiples of $1.  $1  is represented by 100.
		costPerChanceInt = Integer.parseInt(vars.get(&quot;maxCostPerChance&quot;));
		costPerChanceInt = costPerChanceInt / 10;
		costPerChanceInt = randGen.nextInt(costPerChanceInt) + 1;
		costPerChanceInt = costPerChanceInt * 10;
		costPerChance = costPerChanceInt.toString();	
		betStr = &quot;\&quot;costPerChance\&quot;: &quot; + costPerChance.toString() + &quot;,\n\&quot;numberOfGames\&quot;: &quot; + numberOfGames.toString() + &quot;,\n\&quot;selections\&quot;: [&quot; + numberSelection.toString() + &quot;],\n\&quot;bonusSelected\&quot;: &quot; + bonusSelected;
	}*/
	vars.put(&quot;betString&quot;, betStr);
	return;
}

//String deviceSpread = &quot;25-25-25-25&quot;;


determineDevice() {

	//String[] dvcSpread = deviceSpread.split(&quot;-&quot;);
	String[] dvcSpread = (vars.get(&quot;deviceIDSpread&quot;)).split(&quot;-&quot;);
	int[] deviceSpread = new int[dvcSpread.length];
	int deviceSpreadTotal = 0;
	int device = 0;
	String deviceID;
	int selectionComplete = 0;
	int cumulativeSpread = 0;
	
	// Classic spread: string[] to int[], and total
	for (int i = 0; i &lt; dvcSpread.length; i++) {
		deviceSpread[i] = Integer.parseInt(dvcSpread[i]);
		deviceSpreadTotal += deviceSpread[i];
	}
	int rands = randGen.nextInt(deviceSpreadTotal);

	for (int i = 0; i &lt; dvcSpread.length; i++) {
		cumulativeSpread = cumulativeSpread + deviceSpread[i];
		if ((rands &lt; cumulativeSpread) &amp;&amp; (selectionComplete == 0)) {
			device = i + 1;
			selectionComplete = 1;
		}
	}

	if (device == 1) {
		// Keno web
		deviceID = &quot;20000050&quot;;
	} else if (device == 2) {
		// Keno iPhone
		deviceID = &quot;20000051&quot;;		
	} else if (device == 3) {
		// Keno iPad
		deviceID = &quot;20000052&quot;;
	} else {
		// Keno android
		deviceID = &quot;20000053&quot;;
	}
	vars.put(&quot;device&quot;, deviceID);
	return;
}

// Determine type of bet to be placed - either Classic, Classic w/ bonus/multiplier or Heads/Tails
// Divide total random number by 100 - to provide a random number to 2 decimal places
double randPercent = randGen.nextInt(totalPercent);
randPercent = randPercent/100;

// Determine bet type
if (randPercent &lt; classicPercent) {
	// Classic bet
	vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
	//vars.put(&quot;temp&quot;, &quot;classic&quot;);
	determineClassicBetSpread();
} else if (randPercent &lt; (classicPercent + bonusPercent)) {
	// Classic bet with Bonus/multiplier
	vars.put(&quot;URL&quot;, vars.get(&quot;pathStdBet&quot;));
	//vars.put(&quot;temp&quot;, &quot;bonus&quot;);
	determineBonusBetSpread();
} else {
	// Heads or Tails bet
	//vars.put(&quot;temp&quot;, &quot;heads&quot;);
	vars.put(&quot;URL&quot;, vars.get(&quot;pathHeadsTails&quot;));
	determineHeadsTailsBetSpread();
}
determineDevice();</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Informational" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">50</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Informational" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverIP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">KenoRest/services/keno/state/${state}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">Random randGen = new Random();
int rand = randGen.nextInt(4);

if (rand == 0) {
	state = &quot;ALL&quot;;
} else if (rand == 1) {
	state = &quot;VIC&quot;;
} else if (rand == 2) {
	state = &quot;NSW&quot;;
} else {
	state = &quot;QLD&quot;;
}
vars.put(&quot;state&quot;, state);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Shakeout" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1430103782000</longProp>
        <longProp name="ThreadGroup.end_time">1428213370000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Transactions per Minute Controller" enabled="true">
          <intProp name="calcMode">1</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>300.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PlaceBet" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">50</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If StandardBet" enabled="true">
            <stringProp name="IfController.condition">&quot;${URL}&quot; == &quot;pathStdBet&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StandardBet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;${device}&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${selections}],&#xd;
    &quot;bonusSelected&quot;: ${bonusSelected}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Heads or Tails" enabled="true">
            <stringProp name="IfController.condition">&quot;${URL}&quot; == &quot;pathHeadsTails&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StandardBet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;${device}&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;${selections}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Informational" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">50</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Informational" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverIP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">KenoRest/services/keno/state/${state}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">Random randGen = new Random();
int rand = randGen.nextInt(4);

if (rand == 0) {
	state = &quot;ALL&quot;;
} else if (rand == 1) {
	state = &quot;VIC&quot;;
} else if (rand == 2) {
	state = &quot;NSW&quot;;
} else {
	state = &quot;QLD&quot;;
}
vars.put(&quot;state&quot;, state);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario Setup (No of VUsers / Rampup / Duration)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1423975016000</longProp>
        <longProp name="ThreadGroup.end_time">1424839016000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="4Spots" elementType="Argument">
              <stringProp name="Argument.name">4Spots</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.desc">Std Bet 4 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="5Spots" elementType="Argument">
              <stringProp name="Argument.name">5Spots</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.desc">Std Bet 5 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="6Spots" elementType="Argument">
              <stringProp name="Argument.name">6Spots</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.desc">Std Bet 6 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="7Spots" elementType="Argument">
              <stringProp name="Argument.name">7Spots</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.desc">Std Bet 7 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="8Spots" elementType="Argument">
              <stringProp name="Argument.name">8Spots</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.desc">Std Bet 8 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="9Spots" elementType="Argument">
              <stringProp name="Argument.name">9Spots</stringProp>
              <stringProp name="Argument.value">9</stringProp>
              <stringProp name="Argument.desc">Std Bet 9 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="10Spots" elementType="Argument">
              <stringProp name="Argument.name">10Spots</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.desc">Std Bet 10 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="15Spots" elementType="Argument">
              <stringProp name="Argument.name">15Spots</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.desc">Std Bet 15 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="20Spots" elementType="Argument">
              <stringProp name="Argument.name">20Spots</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Std Bet 20 Spots</stringProp>
            </elementProp>
            <elementProp name="40Spots" elementType="Argument">
              <stringProp name="Argument.name">40Spots</stringProp>
              <stringProp name="Argument.value">40</stringProp>
              <stringProp name="Argument.desc">Std Bet 40 Spots</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathStdBet" elementType="Argument">
              <stringProp name="Argument.name">pathStdBet</stringProp>
              <stringProp name="Argument.value">KenoRest/services/keno/std-bet</stringProp>
              <stringProp name="Argument.desc">UAT: KenoRest/services/keno/std-bet                    LOCAL:services/keno/std-bet</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathHeadsTails" elementType="Argument">
              <stringProp name="Argument.name">pathHeadsTails</stringProp>
              <stringProp name="Argument.value">KenoRest/services/keno/heads-tails</stringProp>
              <stringProp name="Argument.desc">UAT: KenoRest/services/keno/heads-tails            LOCAL:services/keno/heads-tails</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">8080</stringProp>
              <stringProp name="Argument.desc">UAT: 8080                                                                     LOCAL:8181</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="serverIP" elementType="Argument">
              <stringProp name="Argument.name">serverIP</stringProp>
              <stringProp name="Argument.value">10.26.128.55</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">UAT:10.26.128.55             DEV: 10.39.71.150                      LOCAL:localhost</stringProp>
            </elementProp>
            <elementProp name="maxNumbOfGames" elementType="Argument">
              <stringProp name="Argument.name">maxNumbOfGames</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">should match value configured at Keno Host</stringProp>
            </elementProp>
            <elementProp name="maxcostPerChance" elementType="Argument">
              <stringProp name="Argument.name">maxcostPerChance</stringProp>
              <stringProp name="Argument.value">10000</stringProp>
              <stringProp name="Argument.desc">should match value configured at Keno Host</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverIP}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">accounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//calculate the ticketCost based on bonusSelected (true/false)
var randBool = vars.get(&quot;randBool&quot;);
if (randBool == &quot;false&quot;)
{
	var TicketCost = ${costPerChance} * ${numberOfGames};
	vars.put(&quot;TicketCost&quot;, TicketCost);	
}
else if (randBool == &quot;true&quot;)
{
	var TicketCost = ${costPerChance} * ${numberOfGames};
	TicketCost = TicketCost * 2;
	vars.put(&quot;TicketCost&quot;, TicketCost);	
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - ticketCost" enabled="true">
            <stringProp name="JSON_PATH">$[&apos;ticketCost&apos;]</stringProp>
            <stringProp name="EXPECTED_VALUE">${TicketCost}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 4 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet-4 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;4Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;4Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);



//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 7 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet-7 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;7Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 8 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet-8 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;8Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 9 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet-9 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;9Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 10 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet 10 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;10Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 15 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet 15 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;15Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - StdBet 40 Spots" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet 40 Spots " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;40Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - Heads" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Heads" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;heads&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;
//Random costPerChance
boolean notAHundredMultiple = true;
int calculateRandomNumber() {
	Random costPerChance = new Random();
	int costPerChanceInt =  costPerChance.nextInt(2000) +1;
	if (costPerChanceInt % 100 == 0) {
		notAHundredMultiple = false;

	}
	return costPerChanceInt;;
}

int costPerChanceInt;
while (notAHundredMultiple) {
	costPerChanceInt = calculateRandomNumber();
	log.info (&quot;rand cost &quot; + costPerChanceInt);
}
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random costPerChance: &quot;+ costPerChanceInt);


ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;40Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var TicketCost = ${costPerChance} * ${numberOfGames};
	vars.put(&quot;TicketCost&quot;, TicketCost);


	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - Tails" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tails" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;tails&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;

//Random costPerChance
boolean notAHundredMultiple = true;
int calculateRandomNumber() {
	Random costPerChance = new Random();
	int costPerChanceInt =  costPerChance.nextInt(2000) +1;
	if (costPerChanceInt % 100 == 0) {
		notAHundredMultiple = false;

	}
	return costPerChanceInt;;
}

int costPerChanceInt;
while (notAHundredMultiple) {
	costPerChanceInt = calculateRandomNumber();
	log.info (&quot;rand cost &quot; + costPerChanceInt);
}
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random costPerChance: &quot;+ costPerChanceInt);




ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;40Spots&quot;));
while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var TicketCost = ${costPerChance} * ${numberOfGames};
	vars.put(&quot;TicketCost&quot;, TicketCost);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - Evens" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Evens" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;evens&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.util.ArrayList;

//Random costPerChance
boolean notAHundredMultiple = true;
int calculateRandomNumber() {
	Random costPerChance = new Random();
	int costPerChanceInt =  costPerChance.nextInt(2000) +1;
	if (costPerChanceInt % 100 == 0) {
		notAHundredMultiple = false;

	}
	return costPerChanceInt;;
}

int costPerChanceInt;
while (notAHundredMultiple) {
	costPerChanceInt = calculateRandomNumber();
	log.info (&quot;rand cost &quot; + costPerChanceInt);
}
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random costPerChance: &quot;+ costPerChanceInt);
ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;40Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var TicketCost = ${costPerChance} * ${numberOfGames};
	vars.put(&quot;TicketCost&quot;, TicketCost);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Throughput Controller -  Host Error messages" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - insufficientBalAccounts" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">insufficientBalAccounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">insuffAccountNumber,insuffAccountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">accounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Insufficient Balance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${insuffAccountNumber},&#xd;
    &quot;password&quot;: &quot;${insuffAccountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${invCostPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Account Number Not Found   ${invAccountNumber}</stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">3200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Throughput Controller - StdBet Invalid Parameters" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - invalid account number" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">invAccounts1.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">invAccountNumber,invAccountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">accounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Invalid Account Number" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${invAccountNumber},&#xd;
    &quot;password&quot;: &quot;${invAccountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${invCostPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Account Number Not Found   ${invAccountNumber}</stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">3200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Selections Not Unique" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [[10,10,12,13]],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;4Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());


//Random TRUE-FALSE for bonusSelected
Random randGenBoolean = new Random();
int randBoolInt = randGenBoolean.nextInt(2);
String randBool;

if (randBoolInt == 0)
{
	randBool = &quot;true&quot;;
}
else
{
	randBool = &quot;false&quot;;
}
vars.put(&quot;randBool&quot;, randBool);

//Random numbOfGames
Random NumbOfGames = new Random();
int NumbOfGamesInt =  NumbOfGames.nextInt(50) +1;
vars.put(&quot;numberOfGames&quot;, NumbOfGamesInt.toString());

//Random costPerChance
Random costPerChance = new Random();
int costPerChanceInt =  costPerChance.nextInt(200) +1;
costPerChanceInt = costPerChanceInt / 10 +15;
costPerChanceInt = costPerChanceInt * 10;
vars.put(&quot;costPerChance&quot;, costPerChanceInt.toString());
log.info(&quot;Random NumbOfGames: &quot;+ costPerChanceInt);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1019</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">SELECTIONS MUST BE UNIQUE</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Invalid Cost Per Chance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${invCostPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;7Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">INVALID VALUE</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1019</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Invalid Number of Games" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${invCostPerChance},&#xd;
    &quot;numberOfGames&quot;: ${invNumberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;8Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Games" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidGames1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invNumberOfGames</stringProp>
            </CSVDataSet>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">INVALID NUMBER OF GAMES</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1019</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Invalid Selections" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${invCostPerChance},&#xd;
    &quot;numberOfGames&quot;: ${invNumberOfGames},&#xd;
    &quot;selections&quot;: [[${selection1}, ${selection2},12,13]],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Invalid Selections" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidSelections1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">selection1,selection2,selection3,selection4</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">NUMBERS MUST BE GREATER THAN 0 AND LESS THAN 81</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1019</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - Invalid Bonus Selected" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: False;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;7Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 400 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Throughput Controller - StdBet Missing Mandatory Fields" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">accounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - No Account Number" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;7Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - No Cost Per Chance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;6Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - No Number of Games" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Games" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidGames1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invNumberOfGames</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;5Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - No Selections" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;bonusSelected&quot;: ${randBool}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Invalid Selections" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidSelections1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">selection1</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet - No Bonus Selected" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  },&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;7Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 400 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Throughput Controller - HeadsTails Bet Invalid Parameters" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - invalid account number" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">invAccounts1.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">invAccountNumber,invAccountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">accounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - Invalid Account Number" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${invAccountNumber},&#xd;
    &quot;password&quot;: &quot;${invAccountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;heads&quot;&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">3200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - Invalid Cost Per Chance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${invCostPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;tails&quot;&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">INVALID VALUE</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1019</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - Invalid Number of Games" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${invNumberOfGames},&#xd;
    &quot;selection&quot;: &quot;heads&quot;&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Games" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidGames1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invNumberOfGames</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;422&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">INVALID NUMBER OF GAMES</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1019</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - Invalid Selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;headsS&quot;&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">NUMBERS MUST BE GREATER THAN 0 AND LESS THAN 81</stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Throughput Controller - HeadsTails Bet Missing Mandatory Fields" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">accounts.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber,accountPassword</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - No Account Number" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;heads&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - No Cost Per Chance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;heads&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Cost" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidCost1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invCostPerChance</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - No Number of Games" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;selection&quot;: &quot;heads&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Inv Games" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidGames1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">invNumberOfGames</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - No Selection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;deviceId&quot;: &quot;20000050&quot;,&#xd;
&quot;accountDetails&quot;: {&#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;password&quot;: &quot;${accountPassword}&quot;&#xd;
  }, &#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Invalid Selections" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">invalidSelections1.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">selection1</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">1001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE">Invalid Payload</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Throughput Controller - Invalid GateWay Address - Host Not Available" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - valid params" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">stdBet1.txt</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">accountNumber</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="StdBet-4 Spots -Wrong Server IP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selections&quot;: [${StdBet_Random}],&#xd;
    &quot;bonusSelected&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.39.71.155</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathStdBet}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.util.ArrayList;

ArrayList selectionArray = new ArrayList();
Random randGen = new Random();

int count = Integer.parseInt(vars.get(&quot;4Spots&quot;));

while (selectionArray.size() &lt; count)
{
	int newint = randGen.nextInt(80) +1;
	if (selectionArray.contains(newint)) continue;
	selectionArray.add(newint);
}

log.info(selectionArray.toString());
vars.put(&quot;StdBet_Random&quot;,selectionArray.toString());
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HeadsTails - Host Is Not Available (Stop Host)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
    &quot;accountNumber&quot;: ${accountNumber},&#xd;
    &quot;costPerChance&quot;: ${costPerChance},&#xd;
    &quot;numberOfGames&quot;: ${numberOfGames},&#xd;
    &quot;selection&quot;: &quot;evens&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pathHeadsTails}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">//set the response code to OK so test will pass. By default IF JMETER will fail any test if error 422 or 500 has been received.
if (ResponseCode.equals(&quot;400&quot;) == true) { 
	SampleResult.setSuccessful(true);
    //SampleResult.setResponseMessageOK();
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - code" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;code&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - message" enabled="true">
              <stringProp name="JSON_PATH">$[&apos;message&apos;]</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
